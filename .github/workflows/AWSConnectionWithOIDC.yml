name: FastAPI Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials with OIDC and Assume Role
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Create or Get ECR Repository
      - name: Create or Get ECR Repository
        id: ecr
        run: |
          REPO_NAME="my-fastapi-app"
          
          # Check if the repository already exists
          ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text 2>/dev/null || echo "NOT_FOUND")

          # If the repository doesn't exist, create it
          if [ "$ECR_REPO_URI" == "NOT_FOUND" ]; then
            aws ecr create-repository --repository-name $REPO_NAME
            ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text)
          fi

          # Export the repository URI for later steps
          echo "ECR_REPO_URI=$ECR_REPO_URI" >> $GITHUB_ENV

      # Step 4: Deploy CloudFormation stack (unified template)
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/deploy.yml \
            --stack-name fastapi-app-stack \
            --parameter-overrides \
              ImageUrl=$ECR_REPO_URI:latest \
            --capabilities CAPABILITY_NAMED_IAM

      # Step 5: Get CloudFormation outputs (S3, IAM Role, ALB DNS)
      - name: Get CloudFormation Outputs
        run: |
          S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" \
            --output text)

          IAM_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='IAMRoleArn'].OutputValue" \
            --output text)

          ALB_DNS_NAME=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" \
            --output text)

          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
          echo "IAM_ROLE_ARN=$IAM_ROLE_ARN" >> $GITHUB_ENV
          echo "ALB_DNS_NAME=$ALB_DNS_NAME" >> $GITHUB_ENV

      # Step 6: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $ECR_REPO_URI

      # Step 7: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my-fastapi-app .
          docker tag my-fastapi-app:latest $ECR_REPO_URI:latest

      # Step 8: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push $ECR_REPO_URI:latest

      # Step 9: Update ECS Service with new Docker image
      - name: Update ECS Service with new Docker image
        run: |
          aws ecs update-service \
            --cluster fastapi-app-cluster \
            --service fastapi-app-service \
            --force-new-deployment
