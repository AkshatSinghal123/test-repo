name: FastAPI Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials with OIDC and Assume Role
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Create or Get ECR Repository
      - name: Create or Get ECR Repository
        id: ecr
        run: |
          REPO_NAME="my-fastapi-app"
          
          # Check if the repository already exists
          ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text 2>/dev/null || echo "NOT_FOUND")

          # If the repository doesn't exist, create it
          if [ "$ECR_REPO_URI" == "NOT_FOUND" ]; then
            aws ecr create-repository --repository-name $REPO_NAME
            ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text)
          fi

          echo "ECR_REPO_URI=$ECR_REPO_URI" >> $GITHUB_ENV

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my-fastapi-app .
          docker tag my-fastapi-app:latest $ECR_REPO_URI:latest

      # Step 5: Log in to Amazon ECR and Push Docker image
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO_URI

      - name: Push Docker image to Amazon ECR
        run: |
          docker push $ECR_REPO_URI:latest

      # Step 6: Deploy CloudFormation stack (unified template)
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/deploy.yml \
            --stack-name fastapi-app-stack \
            --parameter-overrides ImageUrl=$ECR_REPO_URI:latest \
            --capabilities CAPABILITY_NAMED_IAM

      # Step 7: Get CloudFormation outputs (VPC, Subnets, IAM Role, SGs, S3)
      - name: Get CloudFormation Outputs
        run: |
          VPC_ID=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='VPCId'].OutputValue" \
            --output text)

          PUBLIC_SUBNET1=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet1Id'].OutputValue" \
            --output text)

          PUBLIC_SUBNET2=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet2Id'].OutputValue" \
            --output text)

          TASK_EXECUTION_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TaskExecutionRoleArn'].OutputValue" \
            --output text)

          ALB_SG=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ALBSecurityGroupId'].OutputValue" \
            --output text)

          ECS_SG=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ECSSecurityGroupId'].OutputValue" \
            --output text)

          S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name fastapi-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" \
            --output text)

          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET1=$PUBLIC_SUBNET1" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET2=$PUBLIC_SUBNET2" >> $GITHUB_ENV
          echo "TASK_EXECUTION_ROLE_ARN=$TASK_EXECUTION_ROLE_ARN" >> $GITHUB_ENV
          echo "ALB_SG=$ALB_SG" >> $GITHUB_ENV
          echo "ECS_SG=$ECS_SG" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV

      # Step 8: Update ECS Service with new Docker image
      - name: Update ECS Service with new Docker image
        run: |
          aws ecs update-service \
            --cluster fastapi-app-cluster \
            --service fastapi-app-service \
            --force-new-deployment \
            --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNET1,$PUBLIC_SUBNET2],securityGroups=[$ECS_SG],assignPublicIp=ENABLED}" \
            --task-definition "fastapi-app-task-def:1"  # Adjust the task definition version as necessary

      # Step 9: Update environment variables for the ECS task definition
      - name: Update ECS Task Definition with Environment Variables
        run: |
          # Fetch the current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition fastapi-app-task-def)
          
          # Update environment variables
          UPDATED_TASK_DEF=$(echo $CURRENT_TASK_DEF | jq --arg S3_BUCKET_NAME "${{ env.S3_BUCKET_NAME }}" \
                                                  --arg IAM_ROLE_ARN "${{ env.TASK_EXECUTION_ROLE_ARN }}" \
                                                  --arg ALB_DNS_NAME "$(aws cloudformation describe-stacks --stack-name fastapi-app-stack --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" --output text)" \
                                                  '.taskDefinition.containerDefinitions[0].environment += [{"name": "S3_BUCKET_NAME", "value": $S3_BUCKET_NAME}, {"name": "IAM_ROLE_ARN", "value": $IAM_ROLE_ARN}, {"name": "ALB_DNS_NAME", "value": $ALB_DNS_NAME}]')

          # Register the new task definition
          echo $UPDATED_TASK_DEF | jq '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' | \
          aws ecs register-task-definition --cli-input-json file://<(cat)
